import sys
from PyQt5.QtWidgets import QWidget, QMessageBox, QApplication, QMainWindow
from qtpy import uic
import traceback
from joblib import dump, load
import torch
import pandas as pd
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader, random_split
from datetime import date, datetime
import os
import torch
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np


class Example(QMainWindow):

    def __init__(self):
        super().__init__()
        uic.loadUi("untitled.ui", self)
        self.lineEdit_2.setEnabled(False)
        self.pushButton.clicked.connect(self.click)

    def click(self):
        test = str(self.textEdit.toPlainText())
        df = pd.read_csv(test)
        scaler = load('std_scaler.bin')
        for i, key in enumerate(scaler.keys()):
            norm = scaler[key].transform(df.iloc[:, i].values.reshape(-1, 1))
            df.iloc[:, i] = norm
        model = torch.load(r"C:\Users\Gosha Kvaratskheliia\PycharmProjects\pythonyandex\model")
        model.eval()
        self.lineEdit_2.setText(str(int(model.predict(x1)[0])))

def excepthook(exc_type, exc_value, exc_tb):
    tb = "".join(traceback.format_exception(exc_type, exc_value, exc_tb))
    print("Oбнаружена ошибка !:", tb)


sys.excepthook = excepthook
if __name__ == '__main__':

    app = QApplication(sys.argv)
    ex = Example()
    ex.show()
    sys.exit(app.exec_())
